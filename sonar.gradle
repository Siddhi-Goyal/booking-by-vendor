sonarqube {
	properties {
		if (project.hasProperty('pullRequest')) {
			property 'sonar.pullrequest.provider', 'github'
			property 'sonar.pullrequest.github.repository', 'gisbooking/smee-user-service'
			property 'sonar.pullrequest.key', System.getenv('ghprbPullId')
			property 'sonar.pullrequest.branch', System.getenv('ghprbSourceBranch')
			property 'sonar.pullrequest.base', System.getenv('ghprbTargetBranch')
		}
		property "sonar.login", System.getenv('SONAR_TOKEN')
		property "sonar.projectKey", 'com.gap.sourcing:smee-user-service'
		property "sonar.projectName", 'smee-user-service'
		property "sonar.projectVersion", version
		property "sonar.projectDate", "${new Date().next().format("yyyy-MM-dd'T'HH:mm:ssZ")}"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.exclusions", "/src/main/java/com/gap/sourcing/smee/SmeeUserServiceApplication.java, " +
				"/src/main/java/com/gap/sourcing/smee/contexts/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/controllers/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/dtos/**/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/entities/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/enums/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/envelopes/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/exceptions/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/filters/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/repositories/*.java, " +
				"/src/main/java/com/gap/sourcing/smee/configuration/*.java"
	}
}

test.finalizedBy(jacocoTestReport)

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}
